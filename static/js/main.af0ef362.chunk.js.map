{"version":3,"sources":["utils/normalizeResponse.js","reducers/generalReducer.js","store/index.js","actions/generalActions.js","services/generalServices.js","components/atoms/PageLoader/PageLoader.js","routes/MainRoutes.js","components/organisms/Navbar/Navbar.js","components/organisms/Footer/Footer.js","templates/MainTemplate.js","views/Root/Root.js","serviceWorker.js","index.js"],"names":["normalizeResponse","res","feed","entry","map","arr","id","attributes","category","label","artist","image","replace","title","price","date","buttons","link","href","desc","summary","rights","initialState","response","generalReducer","state","action","type","produce","draftState","payload","store","createStore","mainReducer","composeWithDevTools","applyMiddleware","thunk","data","params","dispatch","source","axios","CancelToken","get","cancelToken","token","then","generalActions","catch","err","isCancel","cancel","PageLoader","className","role","Home","lazy","Details","MainRoutes","fallback","path","Navbar","to","aria-label","Footer","MainTemplate","useDispatch","history","useHistory","useEffect","generalServices","listen","window","scrollTo","Root","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.af0ef362.chunk.js","sourcesContent":["const normalizeResponse = (res) => {\r\n  return res.feed.entry.map((arr) => ({\r\n    id: arr.id?.attributes['im:id'],\r\n    category: arr.category?.attributes?.label,\r\n    artist: arr['im:artist']?.label,\r\n    image: arr['im:image'][2].label.replace('113x170bb.png', '460x0w.jpg'),\r\n    title: arr['im:name']?.label,\r\n    price: arr['im:price']?.label,\r\n    date: arr['im:releaseDate']?.attributes?.label,\r\n    buttons: arr.link.map((link) => ({\r\n      title: link.attributes.title || 'Check on iTunes',\r\n      href: link.attributes.href,\r\n    })),\r\n    desc: arr.summary?.label,\r\n    rights: arr.rights?.label,\r\n  }));\r\n};\r\n\r\nexport default normalizeResponse;\r\n","import produce from 'immer';\r\nimport normalizeResponse from 'utils/normalizeResponse';\r\n\r\nconst initialState = {\r\n  response: [],\r\n};\r\n\r\nconst generalReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'SET_RESPONSE':\r\n      return produce(state, (draftState) => {\r\n        draftState.response = normalizeResponse(action.payload);\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default generalReducer;\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport mainReducer from 'reducers/generalReducer';\r\n\r\nconst store = createStore(mainReducer, composeWithDevTools(applyMiddleware(thunk)));\r\n\r\nexport default store;\r\n","const setResponse = (data) => ({\r\n  type: 'SET_RESPONSE',\r\n  payload: data,\r\n});\r\n\r\nexport default { setResponse };\r\n","import axios from 'axios';\r\nimport generalActions from 'actions/generalActions';\r\n\r\nconst baseUrl = 'https://itunes.apple.com/us/rss/topmovies/limit=100/json';\r\n\r\nconst getMovies = (params) => (dispatch) => {\r\n  const source = axios.CancelToken.source();\r\n  axios\r\n    .get(baseUrl, {\r\n      cancelToken: source.token,\r\n      params: {\r\n        ...params,\r\n      },\r\n    })\r\n    .then(({ data }) => {\r\n      dispatch(generalActions.setResponse(data));\r\n    })\r\n    .catch((err) => {\r\n      if (!axios.isCancel(err)) {\r\n        // do sth\r\n      }\r\n    });\r\n\r\n  return { cancel: () => source.cancel() };\r\n};\r\n\r\nexport default { getMovies };\r\n","import React from 'react';\r\nimport './PageLoader.scss';\r\n\r\nconst PageLoader = () => {\r\n  return (\r\n    <div className=\"loader\">\r\n      <div className=\"spinner-border loader__spinner text-primary\" role=\"status\">\r\n        <span className=\"sr-only\">Loading...</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PageLoader;\r\n","import React, { lazy, Suspense } from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport PageLoader from 'components/atoms/PageLoader/PageLoader';\r\n\r\nconst Home = lazy(() => import('views/Home/Home'));\r\nconst Details = lazy(() => import('views/Details/Details'));\r\n\r\nconst MainRoutes = () => (\r\n  <Suspense fallback={<PageLoader />}>\r\n    <Switch>\r\n      <Route path=\"/movie/:id\">\r\n        <Details />\r\n      </Route>\r\n      <Route path=\"/\">\r\n        <Home />\r\n      </Route>\r\n    </Switch>\r\n  </Suspense>\r\n);\r\n\r\nexport default MainRoutes;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Navbar.scss';\r\n\r\nconst Navbar = () => (\r\n  <nav className=\"navbar\">\r\n    <Link to=\"/\" className=\"navbar__link mb-0 py-3 h2\" aria-label=\"Return to home page\">\r\n      Streaming Service\r\n    </Link>\r\n  </nav>\r\n);\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer className=\"mt-auto pt-5\">\r\n      <div className=\"navbar d-block mb-0 text-center\">By AWydra</div>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport generalServices from 'services/generalServices';\r\nimport MainRoutes from 'routes/MainRoutes';\r\nimport Navbar from 'components/organisms/Navbar/Navbar';\r\nimport Footer from 'components/organisms/Footer/Footer';\r\nimport './MainTemplate.scss';\r\n\r\nconst MainTemplate = () => {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    dispatch(generalServices.getMovies());\r\n\r\n    history.listen(() => window.scrollTo(0, 0));\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <header>\r\n        <Navbar />\r\n      </header>\r\n      <main>\r\n        <section className=\"container\">\r\n          <MainRoutes />\r\n        </section>\r\n      </main>\r\n      <Footer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainTemplate;\r\n","// @ts-nocheck\r\nimport React from 'react';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport store from 'store';\r\nimport MainTemplate from 'templates/MainTemplate';\r\n\r\nconst Root = () => {\r\n  return (\r\n    <Provider store={store}>\r\n      <Router>\r\n        <MainTemplate />\r\n      </Router>\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default Root;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Root from 'views/Root/Root';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Root />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}